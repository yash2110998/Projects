import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller

def rmse(y_true, y_pred):
    return np.sqrt(mean_squared_error(y_true, y_pred))

data = pd.read_csv(r"C:\Users\Thinkpad\Downloads\archive\daily-minimum-temperatures-in-me.csv",parse_dates=['Date'], index_col='Date')
print(data.head())

print(data.isnull().sum())

result = adfuller(data['temperature'])
print('ADF Statistic:' % result[0])
print('p-value:', result[1])

plt.figure(figsize=(10,6))
plt.plot(data, label = 'temperature')
plt.title('daily temperature')
plt.xlabel('Date')
plt.ylabel('temperature')
plt.legend()
plt.show()

from statsmodels.tsa.seasonal import seasonal_decompose
# Perform decomposition
result = seasonal_decompose(data['temperature'], model='additive', period=12)
result.plot()
plt.show()



model= ARIMA(data, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary())

# Plot ACF
plt.figure(figsize=(10, 6))
plot_acf(data['temperature'], lags=20, ax=plt.gca())
plt.title('Autocorrelation Function (ACF)')
plt.show()

# Plot PACF
plt.figure(figsize=(10, 6))
plot_pacf(data['temperature'], lags=20, ax=plt.gca())
plt.title('Partial Autocorrelation Function (PACF)')
plt.show()

forecast_steps = 12
forecast = model_fit.forecast(steps=forecast_steps)

forecast_dates = pd.date_range(start=data.index[-1], periods=forecast_steps + 1, freq='ME')[1:]
forecast_data = pd.DataFrame(forecast, index=forecast_dates, columns=['Forecast'])


plt.figure(figsize=(10, 6))
plt.plot(data, label='Actual temeprature')
plt.plot(forecast_data, label='Forecasted temeprature', color='green')
plt.title('temperature Forecast')
plt.xlabel('date')
plt.ylabel('temperature')
plt.legend()
plt.show()

train_size = int(len(data)*0.8)
train, test = data[:train_size], data[train_size:]
#test_size = len(data) - train_size

model = ARIMA(train, order=(1,1,1))
model_fit = model.fit()
test_forecast = model_fit.forecast(steps=len(test))

mae = mean_absolute_error(test, test_forecast)
rmse_val = rmse(test, test_forecast)

print(f'Mean Absolute Error (MAE): {mae}')
print(f'Root Mean Squared Error (RMSE): {rmse_val}')

plt.figure(figsize=(10, 6))
plt.plot(train, label='Train')
plt.plot(test, label='Test')
plt.plot(test.index, test_forecast, label='Forecast', color='red')
plt.title('production Forecast')
plt.xlabel('date')
plt.ylabel('production')
plt.legend()
plt.show()
