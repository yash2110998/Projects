#intro to Machine Learning

print("Welcome to Machine Learning")

import numpy as np

speed = [ 99,86,87,88,111,103,85,86,77,78,75,90]
x = np.mean(speed)
print(x)
x = np.median(x)
print(x)

from scipy import constants
print(constants.liter)

from scipy import stats
x = stats.mode(speed)
print(x)

speed = [86,87,88,86,87,85,86]

x = np.std(speed)
print(x)

speed = [32,111,138,28,59,77,97]

x = np.var(speed)

print(x)

ages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]
x = np.percentile(ages, 75)
print(x)

x = np.percentile(ages, 90)
print(x)


x = np.random.uniform(0.0, 5.0,250)
import matplotlib.pyplot as plt
plt.hist(x, 5)
plt.show()

y = np.random.uniform(0.0, 5.0, 100000)
plt.hist(y, 100)
plt.show()
x = np.random.normal(5.0, 1.0, 100000)
plt.hist(x, 100)
plt.show()

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

plt.scatter(x, y)

plt.show()


x = np.random.normal(5.0, 1.0, 1000)
y = np.random.normal(10.0, 2.0, 1000)

plt.scatter(x, y)
plt.show()

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x,y)

def myfunc(x):
    return slope * x + intercept #y = mx + c

mymodel = list(map(myfunc, x))
plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()
#the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a tollbooth

print(r) # value of r at -0.75 predicts a good negative relationship
#r stands for coefficient of Correlation

#we can use the information we have gathered to predict future values.
#Example: Let us try to predict the speed of a 10 years old car.

speed = myfunc(10)

print(speed)
# spped of the 10 years old car will be 85.59

#Creating a Bad Fit Model

x = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]
y = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
  return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()
print(r) # r = 0.013 indicates a very bad relationship and tells that this dataset is not suitable for linear regresison

speed = myfunc(10)
print(speed)


#Polynomial Regression

#If your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression.
#Polynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.

x = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]
y = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]
# The x-axis represents the hours of the day and the y-axis represents the speed:
mymodel = np.poly1d(np.polyfit(x, y, 3))

myline = np.linspace(1, 22, 100)
#Line starts at position 1, end at 22
plt.scatter(x, y)
plt.plot(myline,mymodel(myline))
plt.show()

from sklearn.metrics import r2_score
print(r2_score(y, mymodel(x)))
#The result R^2 =0.94 shows that there is a very good relationship, and we can use polynomial regression in future predictions.
#R_squared tells hwo well relationship between values of two varaibles X & Y is if R^2 equals to zero then polynomial regression cant be used to predict anything

#predict future values
#ex: Let us try to predict the speed of a car that passes the tollbooth at around the time 17:00:
speed = mymodel(17)
print(speed) #88.87


import pandas as pd
from sklearn import linear_model

df = pd.read_csv(r"C:\Users\Thinkpad\Downloads\data.csv")

print(df.head())

print(df.tail())

print(df.info())

X = df[['Weight', 'Volume']] #Independent variable
y = df['CO2'] #dependent variable

#This object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:

regr = linear_model.LinearRegression()
regr.fit(X, y)

print(regr.coef_)
#The result array represents the coefficient values of weight and volume.
#Weight: 0.00755095
#Volume: 0.00780526
#These values tell us that if the weight increase by 1kg, the CO2 emission increases by 0.00755095g.
#And if the engine size (Volume) increases by 1 cm3, the CO2 emission increases by 0.00780526 g.
#predictedCO2 = regr.predict([[3300, 1300]])
#print(predictedCO2)
#We have predicted that a car with 1.3 liter engine, and a weight of 3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives.
#Which shows that the coefficient of 0.00755095 is correct:

#          107.2087328 + (1000 * 0.00755095) = 114.75968





#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:
#predictedCO2 = regr.predict([[2300, 1300]])

#print(predictedCO2) #107.208
#We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives.







